/**
 * Movilizer starter project definition
 */

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath group: 'com.eriwen', name: 'gradle-cobertura-plugin', version: '1.1.1'
    }
}

apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'cobertura'
apply plugin: 'codenarc'

group = 'com.movilizer.ps'
version = '1.0'

sourceCompatibility = '1.9'
targetCompatibility = '1.9'

repositories {
    jcenter()
    maven {
        credentials {
            username movilizerRepoUsername
            password movilizerPassword
        }
        url 'https://source.movilizer.com/artifactory/lighthouse/'
    }
}

ext {
    gradleVersion = '4.1'
    groovyVersion = '2.4.10'
    movilizerWebserviceVersion = '15.11.2.1'
    mafVersion = '2.5'
    apacheHttpcomponentsVersion = '4.5.3'
    apacheCxfVersion = '3.2.0'
    gsonVersion = '2.8.2'
    jUnitVersion = '4.12'
    hamcrestVersion = '1.3'
    mockitoVersion = '+'
    httpBuilderVersion = '0.7.+'
}

dependencies {
    compile group: 'org.codehaus.groovy', name: 'groovy-all', version: "$groovyVersion"
    compile group: 'com.movilizer', name: 'SRV_UTL_MAFExport', version: "$mafVersion"

    compile group: 'org.apache.httpcomponents', name: 'httpclient', version: "$apacheHttpcomponentsVersion"
    compile group: 'org.apache.httpcomponents', name: 'httpmime', version: "$apacheHttpcomponentsVersion"
    compile group: 'org.apache.httpcomponents', name: 'fluent-hc', version: "$apacheHttpcomponentsVersion"
    compile(group: 'org.apache.cxf', name: 'cxf-rt-frontend-jaxws', version: "$apacheCxfVersion") {
        exclude group: 'com.sun.xml.bind', module: "jaxb-impl"
    }
    compile group: 'org.apache.cxf', name: 'cxf-rt-transports-http', version: "$apacheCxfVersion"
    compile group: 'com.google.code.gson', name: 'gson', version: "$gsonVersion"

    // MAF leaking API missing in the export
    implementation 'com.datastax.cassandra:cassandra-driver-core:3.0.1'
    implementation 'org.jibx:jibx-run:1.2.6'
    implementation 'commons-io:commons-io:2.4'
    implementation 'commons-net:commons-net:2.0'
    implementation 'commons-collections:commons-collections:3.2.2'
    implementation 'commons-codec:commons-codec:1.6'
    implementation 'org.apache.commons:commons-lang3:3.1'
    implementation 'commons-lang:commons-lang:2.6'

    testCompile group: 'junit', name: 'junit', version: "$jUnitVersion"
    testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: "$hamcrestVersion"
    testCompile group: 'org.mockito', name: 'mockito-inline', version: "$mockitoVersion"
    testCompile group: 'org.codehaus.groovy.modules.http-builder', name: 'http-builder', version: "$httpBuilderVersion"
}

// Codenarc config

task copyProjectRules(type: Copy) {
    from fileTree(dir: "$project.projectDir/buildSrc/src/main/groovy/", includes: ['**/*Rule.groovy']).files
    into "$project.projectDir/config/codenarc/rules"
}

build.dependsOn copyProjectRules

codenarcMain {
    ignoreFailures false
    configFile file('config/codenarc/codenarc-main.rules')

    maxPriority1Violations 0
    maxPriority2Violations 10
    maxPriority3Violations 20
}

codenarcTest {
    ignoreFailures true
    configFile file('config/codenarc/codenarc-test.rules')

    maxPriority1Violations 0
    maxPriority2Violations 10
    maxPriority3Violations 20
}

import org.apache.tools.ant.filters.ReplaceTokens
import groovy.json.JsonBuilder
import groovy.json.JsonSlurper

// Change to mafcli structure
sourceSets.main.groovy.srcDirs = ['src', 'scripts']
sourceSets.main.resources.srcDirs = ['resources']
sourceSets.test.groovy.srcDirs = ['test/src']
sourceSets.test.resources.srcDirs = ['test/resources']

project.ext.versionNumber = project.version
project.ext.buildNumber = new Date().format('yyyyMMdd-HHmm')

task copyEventScriptsForDeploy(type: Copy) {
    from 'scripts'
    into 'deploy/scripts'

    filter {
        String line -> line.contains('@RemoveAtDeployment') ? null : line
    }

    filter(ReplaceTokens, tokens: [deployNumber : project.ext.buildNumber,
                                   versionNumber: project.ext.versionNumber])
}

task copyTestEventScriptsForDeploy(type: Copy) {
    from 'test/scripts'
    into 'deploy/scripts'

    filter {
        String line -> line.contains('@RemoveAtDeployment') ? null : line
    }

    filter(ReplaceTokens, tokens: [deployNumber : project.ext.buildNumber,
                                   versionNumber: project.ext.versionNumber])
}

task copyLibraryScriptsForDeploy(type: Copy) {
    from 'src'
    into 'deploy/src'

    filter(ReplaceTokens, tokens: [deployNumber : project.ext.buildNumber,
                                   versionNumber: project.ext.versionNumber])
}

task insertVersionAndBuildNumber {
    dependsOn copyEventScriptsForDeploy,
            copyTestEventScriptsForDeploy,
            copyLibraryScriptsForDeploy

    doLast {
        def tree = fileTree(dir: 'deploy', includes: ['**/*.json'])

        println "  Set version number to $project.ext.versionNumber"
        println "  Set deploy number to $project.ext.buildNumber"

        tree.each { File file ->
            def json = new JsonSlurper().parseText(file.getText())
            if (json.library) {
                json.library.description = "$json.library.description (v=$project.ext.versionNumber; d=$project.ext.buildNumber)"
                file.write(new JsonBuilder(json).toPrettyString())
            }
            if (json.event) {
                json.event.description = "$json.event.description (v=$project.ext.versionNumber; d=$project.ext.buildNumber)"
                file.write(new JsonBuilder(json).toPrettyString())
            }
        }
    }
}

task deploy {
    group 'movilizer'
    description '''Deploys all library and event scripts to a system specified in the configuration
file. Scripts will be overwritten! Call from command line as 'gradle deploy -Pconn=demo'.'''
    dependsOn insertVersionAndBuildNumber

    doLast {

        println 'Deploying libraries and scripts to MAF ...'

        def defaultSuffix = "local"
        def connectionSuffix = defaultSuffix

        if (!project.hasProperty('conn')) {
            println("Connection parameter \"conn\" not defined, using default parameter for deployment: $defaultSuffix")
        } else {
            connectionSuffix = project.getProperty('conn')
        }

        def connectionFile = "connections/connection-" + connectionSuffix + ".json"

        if (!file(connectionFile).exists()) {
            throw new GradleException("Connection file not found: " + connectionFile + "\n" +
                    " 1. For using your personal local connection please create a connection-local.json" +
                    " in the connections folder, and configure to your personal test system. The file is" +
                    " in gitignore, please leave it like that. \n" +
                    " 2. For using a system with a configured connection please specify the conn" +
                    " paramerer, like: ./gradlew deploy -Pconn=demo-sf"
            )
        } else {
            exec {
                commandLine "./mafcli", "import", "--connection", connectionFile, "-s", "deploy"
            }
        }

        delete('deploy/src', 'deploy/scripts')
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = "$gradleVersion"
}